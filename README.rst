NumPy Vendor
============

This builds Linux and Windows release binaries and sources for NumPy using
a Vagrant VM. It should be 100% reproducible. You need Vagrant and Fabric.

The NumPy release notes are here:

https://github.com/numpy/numpy/blob/master/doc/HOWTO_RELEASE.rst.txt

But most of it is automated by numpy-vendor, so once the release branch is
approved for release, just follow the instructions below.

How To Use
----------

Do::

    vagrant up
    fab vagrant prepare

Log in and manually inspect the numpy repository, the release branch will be
checked out. Do some last minute fixes, checkout a different branch, etc.::

    vagrant ssh
    cd repos/numpy
    # Do any changes that are not in official repositories

Typically you want to at least apply a diff like this::

    diff --git a/setup.py b/setup.py
    index b1f53e3..8b36dbe 100755
    --- a/setup.py
    +++ b/setup.py
    @@ -57,7 +57,7 @@ PLATFORMS           = ["Windows", "Linux", "Solaris", "Mac OS-
     MAJOR               = 1
     MINOR               = 7
     MICRO               = 0
    -ISRELEASED          = False
    +ISRELEASED          = True
     VERSION             = '%d.%d.%drc1' % (MAJOR, MINOR, MICRO)

     # Return the git revision as a string

And make sure the ``VERSION`` variable is set properly. Commit it and make sure
that you push this exact commit into the official repository after the release.
Alternatively you can also commit this into numpy ahead of time if you are
*sure* that it will build. Also you want to change/check the following
variables in ``pavement.py``::

    RELEASE_NOTES = 'doc/release/1.7.0-notes.rst'
    LOG_START = 'v1.6.0'
    LOG_END = 'maintenance/1.7.x'


Do the release (build general and windows binaries from the ``repos/numpy``
directory in the Vagrant VM)::

    fab vagrant numpy_release

And the directory ``release`` will be created in
the current directory from the VM. If you need anything else, just login using
``vagrant ssh`` and copy it to ``/vagrant`` inside the VM.

Expert Usage
------------

If you want to start from scratch, but want to reuse the existing vagrant
image, you can keep all the deb packages, but reinstall everything else
(NumPy, Wine, ...) from scratch. Do::

    fab vagrant remove_userspace
    fab vagrant prepare_userspace

This will delete all builds and other possible changes that you made into
the vagrant image. This is equivalent to ``fab vagrant prepare``, but faster.

Mac Binaries
------------

After Linux and Windows release files are in the ``release`` directory, we
generate Mac binaries. First we setup the environment::

    fab -H mac_host mac_setup

where ``mac_host`` is the Mac OS X computer which will be used to build the
binaries. The only prerequisite is that the ``release`` directory contains
the ``reference.pdf`` and ``userguide.pdf`` files generated by the Vagrant VM
in the previous step. You can login manually and do some changes in the numpy
directory if needed. In particular, one some Macs you need to apply the
following patch::

    diff --git a/pavement.py b/pavement.py
    index e693016..0c637f8 100644
    --- a/pavement.py
    +++ b/pavement.py
    @@ -449,7 +449,7 @@ def _build_mpkg(pyver):
         if pyver == "2.5":
             sh("CC=gcc-4.0 LDFLAGS='%s' %s setupegg.py bdist_mpkg" % (ldflags, " ".join(MPKG_PYTHON[pyver])))
         else:
    -        sh("LDFLAGS='%s' %s setupegg.py bdist_mpkg" % (ldflags, " ".join(MPKG_PYTHON[pyver])))
    +        sh("python setupegg.py bdist_mpkg")

     @task
     def simple_dmg():

In order to avoid the error::

    paver dmg -p 2.6
    ---> pavement.dmg
    ---> pavement.clean
    LDFLAGS='-undefined dynamic_lookup -bundle -arch i386 -arch ppc -Wl,-search_paths_first -Lbuild' /Library/Frameworks/Python.framework/Versions/2.6/bin/python setupegg.py bdist_mpkg
    Traceback (most recent call last):
      File "setupegg.py", line 17, in <module>
        from setuptools import setup
    ImportError: No module named setuptools

Then generate the binaries by::

    fab -H mac_host mac_numpy_release

The Mac binaries will be copied to the ``release`` directory locally.


SourceForge
-----------

Upload all the files from the ``release`` directory to SourceForge:

http://sourceforge.net/projects/numpy/files/NumPy/

Lookup the last release to see which files need to be uploaded and double check
that there are no files missing.
